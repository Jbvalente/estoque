
version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: estoque_postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: estoque_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d estoque_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: estoque_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: estoque_backend
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DB_SOURCE=postgresql://admin:password@postgres:5432/estoque_db?sslmode=disable
      - REDIS_URL=redis:6379
      - JWT_SECRET=my-super-secret-key-that-is-long-enough
      - JWT_ACCESS_TTL=15m
      - JWT_REFRESH_TTL=168h
      - LOG_LEVEL=debug
      - CORS_ORIGINS=*
    volumes:
      - ../backend:/app
    # The command will be specified in the Dockerfile's CMD

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: estoque_frontend
    ports:
      - "3001:3000"
    depends_on:
      - backend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080/api/v1
      # For server-side rendering to connect to the backend within the docker network
      - INTERNAL_API_URL=http://backend:8080/api/v1
    volumes:
      - ../frontend:/app
      - /app/node_modules
      - /app/.next

volumes:
  postgres_data:
    driver: local

